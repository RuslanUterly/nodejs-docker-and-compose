services:
  # --------------------
  # Backend
  # --------------------
  backend:
    container_name: kupipodariday-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_PGDATA: ${POSTGRES_PGDATA}
    ports:
      - "4000:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - kp-network

  # --------------------
  # Frontend
  # --------------------
  frontend:
    container_name: kupipodariday-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    depends_on:
      - backend
    networks:
      - kp-network

  # --------------------
  # Database
  # --------------------
  database:
    container_name: kupipodariday-db
    image: postgres:15-alpine
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGDATA: ${POSTGRES_PGDATA}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U student -d kupipodariday"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
# --------------------
# Volumes
# --------------------
volumes:
  postgres-data:

# --------------------
# Networks
# --------------------
networks:
  kp-network:
    driver: bridge